// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model EmailVerificationCode {
  id        String   @id @default(cuid())
  code      String
  userId    String
  email     String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Account {
  id                String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User  @relation(fields: [id], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Permission {
  id    String @id @default(cuid())
  name  String @unique
  type  Json
  roles Role[] @relation("RolePermissions")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]       @relation("UserRoles")
  permissions Permission[] @relation("RolePermissions")
}

model Todo {
  id        String  @id @default(cuid())
  title     String
  completed Boolean @default(false)
}

model Space {
  id        String  @id @default(cuid())
  ownerId   String
  owner     User    @relation(fields: [ownerId], references: [id])
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  articles     Article[]
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ArticleType {
  HOME
  POST
  PAGE
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime @default(now())
  spaceId   String
  space     Space    @relation(fields: [spaceId], references: [id])
}

model Category {
  id       String  @id @default(cuid())
  name     String
  parentId String?

  parent   Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children Category[] @relation("CategoryParent")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  name     String?
  password String?
  articles Article[]
  roles    Role[]  @relation("UserRoles")

  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  emailVerificationCodes EmailVerificationCode[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  spaces    Space[]
}